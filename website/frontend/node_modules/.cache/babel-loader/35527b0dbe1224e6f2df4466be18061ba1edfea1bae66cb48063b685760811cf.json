{"ast":null,"code":"var _jsxFileName = \"/home/dharani/Desktop/SIH_RQR-main./SIH_RQR-main/frontend/src/context/AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { api } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Check if user is already logged in\n    const token = localStorage.getItem('token');\n    if (token) {\n      api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n      // In a real app, you'd validate the token with the server\n      // For now, we'll assume it's valid and set a mock user\n      setUser({\n        id: 1,\n        username: 'admin',\n        email: 'admin@indianrailways.gov.in',\n        full_name: 'System Administrator',\n        role: 'admin',\n        is_active: true\n      });\n    }\n    setLoading(false);\n  }, []);\n  const login = async (username, password) => {\n    try {\n      const response = await api.post('/auth/login', {\n        username,\n        password\n      });\n      const {\n        access_token\n      } = response.data;\n      localStorage.setItem('token', access_token);\n      api.defaults.headers.common['Authorization'] = `Bearer ${access_token}`;\n\n      // Set user data (in a real app, you'd get this from the token or a separate API call)\n      setUser({\n        id: 1,\n        username,\n        email: `${username}@indianrailways.gov.in`,\n        full_name: username === 'admin' ? 'System Administrator' : username,\n        role: username === 'admin' ? 'admin' : 'inspector',\n        is_active: true\n      });\n    } catch (error) {\n      throw error;\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    delete api.defaults.headers.common['Authorization'];\n    setUser(null);\n  };\n  const value = {\n    user,\n    login,\n    logout,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 10\n  }, this);\n};\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","api","jsxDEV","_jsxDEV","AuthContext","undefined","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","token","localStorage","getItem","defaults","headers","common","id","username","email","full_name","role","is_active","login","password","response","post","access_token","data","setItem","error","logout","removeItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/dharani/Desktop/SIH_RQR-main./SIH_RQR-main/frontend/src/context/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { api } from '../services/api';\n\ninterface User {\n  id: number;\n  username: string;\n  email: string;\n  full_name: string;\n  role: string;\n  is_active: boolean;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  login: (username: string, password: string) => Promise<void>;\n  logout: () => void;\n  loading: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Check if user is already logged in\n    const token = localStorage.getItem('token');\n    if (token) {\n      api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n      // In a real app, you'd validate the token with the server\n      // For now, we'll assume it's valid and set a mock user\n      setUser({\n        id: 1,\n        username: 'admin',\n        email: 'admin@indianrailways.gov.in',\n        full_name: 'System Administrator',\n        role: 'admin',\n        is_active: true\n      });\n    }\n    setLoading(false);\n  }, []);\n\n  const login = async (username: string, password: string) => {\n    try {\n      const response = await api.post('/auth/login', { username, password });\n      const { access_token } = response.data;\n      \n      localStorage.setItem('token', access_token);\n      api.defaults.headers.common['Authorization'] = `Bearer ${access_token}`;\n      \n      // Set user data (in a real app, you'd get this from the token or a separate API call)\n      setUser({\n        id: 1,\n        username,\n        email: `${username}@indianrailways.gov.in`,\n        full_name: username === 'admin' ? 'System Administrator' : username,\n        role: username === 'admin' ? 'admin' : 'inspector',\n        is_active: true\n      });\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem('token');\n    delete api.defaults.headers.common['Authorization'];\n    setUser(null);\n  };\n\n  const value = {\n    user,\n    login,\n    logout,\n    loading\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAmB,OAAO;AACxF,SAASC,GAAG,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAkBtC,MAAMC,WAAW,gBAAGP,aAAa,CAA8BQ,SAAS,CAAC;AAEzE,OAAO,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAMC,OAAO,GAAGV,UAAU,CAACM,WAAW,CAAC;EACvC,IAAII,OAAO,KAAKH,SAAS,EAAE;IACzB,MAAM,IAAII,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,OAAO;AAYpB,OAAO,MAAMI,YAAyC,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EACzE,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGf,QAAQ,CAAc,IAAI,CAAC;EACnD,MAAM,CAACgB,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACd;IACA,MAAMiB,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAIF,KAAK,EAAE;MACThB,GAAG,CAACmB,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,GAAG,UAAUL,KAAK,EAAE;MAChE;MACA;MACAH,OAAO,CAAC;QACNS,EAAE,EAAE,CAAC;QACLC,QAAQ,EAAE,OAAO;QACjBC,KAAK,EAAE,6BAA6B;QACpCC,SAAS,EAAE,sBAAsB;QACjCC,IAAI,EAAE,OAAO;QACbC,SAAS,EAAE;MACb,CAAC,CAAC;IACJ;IACAZ,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMa,KAAK,GAAG,MAAAA,CAAOL,QAAgB,EAAEM,QAAgB,KAAK;IAC1D,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAM9B,GAAG,CAAC+B,IAAI,CAAC,aAAa,EAAE;QAAER,QAAQ;QAAEM;MAAS,CAAC,CAAC;MACtE,MAAM;QAAEG;MAAa,CAAC,GAAGF,QAAQ,CAACG,IAAI;MAEtChB,YAAY,CAACiB,OAAO,CAAC,OAAO,EAAEF,YAAY,CAAC;MAC3ChC,GAAG,CAACmB,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,GAAG,UAAUW,YAAY,EAAE;;MAEvE;MACAnB,OAAO,CAAC;QACNS,EAAE,EAAE,CAAC;QACLC,QAAQ;QACRC,KAAK,EAAE,GAAGD,QAAQ,wBAAwB;QAC1CE,SAAS,EAAEF,QAAQ,KAAK,OAAO,GAAG,sBAAsB,GAAGA,QAAQ;QACnEG,IAAI,EAAEH,QAAQ,KAAK,OAAO,GAAG,OAAO,GAAG,WAAW;QAClDI,SAAS,EAAE;MACb,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF,CAAC;EAED,MAAMC,MAAM,GAAGA,CAAA,KAAM;IACnBnB,YAAY,CAACoB,UAAU,CAAC,OAAO,CAAC;IAChC,OAAOrC,GAAG,CAACmB,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC;IACnDR,OAAO,CAAC,IAAI,CAAC;EACf,CAAC;EAED,MAAMyB,KAAK,GAAG;IACZ1B,IAAI;IACJgB,KAAK;IACLQ,MAAM;IACNtB;EACF,CAAC;EAED,oBAAOZ,OAAA,CAACC,WAAW,CAACoC,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAA5B,QAAA,EAAEA;EAAQ;IAAA8B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAuB,CAAC;AAC9E,CAAC;AAAChC,GAAA,CA3DWF,YAAyC;AAAAmC,EAAA,GAAzCnC,YAAyC;AAAA,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}