{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{api}from'../services/api';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext(undefined);export const useAuth=()=>{const context=useContext(AuthContext);if(context===undefined){throw new Error('useAuth must be used within an AuthProvider');}return context;};export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[loading,setLoading]=useState(true);useEffect(()=>{// Check if user is already logged in\nconst token=localStorage.getItem('token');if(token){api.defaults.headers.common['Authorization']=\"Bearer \".concat(token);// In a real app, you'd validate the token with the server\n// For now, we'll assume it's valid and set a mock user\nsetUser({id:1,username:'admin',email:'admin@indianrailways.gov.in',full_name:'System Administrator',role:'admin',is_active:true});}setLoading(false);},[]);const login=async(username,password)=>{try{const response=await api.post('/api/auth/login',{username,password});const{access_token}=response.data;localStorage.setItem('token',access_token);api.defaults.headers.common['Authorization']=\"Bearer \".concat(access_token);// Set user data (in a real app, you'd get this from the token or a separate API call)\nsetUser({id:1,username,email:\"\".concat(username,\"@indianrailways.gov.in\"),full_name:username==='admin'?'System Administrator':username,role:username==='admin'?'admin':'inspector',is_active:true});}catch(error){throw error;}};const logout=()=>{localStorage.removeItem('token');delete api.defaults.headers.common['Authorization'];setUser(null);};const value={user,login,logout,loading};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","api","jsx","_jsx","AuthContext","undefined","useAuth","context","Error","AuthProvider","_ref","children","user","setUser","loading","setLoading","token","localStorage","getItem","defaults","headers","common","concat","id","username","email","full_name","role","is_active","login","password","response","post","access_token","data","setItem","error","logout","removeItem","value","Provider"],"sources":["/home/dharani/Desktop/railway-system/frontend/src/context/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { api } from '../services/api';\n\ninterface User {\n  id: number;\n  username: string;\n  email: string;\n  full_name: string;\n  role: string;\n  is_active: boolean;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  login: (username: string, password: string) => Promise<void>;\n  logout: () => void;\n  loading: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Check if user is already logged in\n    const token = localStorage.getItem('token');\n    if (token) {\n      api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n      // In a real app, you'd validate the token with the server\n      // For now, we'll assume it's valid and set a mock user\n      setUser({\n        id: 1,\n        username: 'admin',\n        email: 'admin@indianrailways.gov.in',\n        full_name: 'System Administrator',\n        role: 'admin',\n        is_active: true\n      });\n    }\n    setLoading(false);\n  }, []);\n\n  const login = async (username: string, password: string) => {\n    try {\n      const response = await api.post('/api/auth/login', { username, password });\n      const { access_token } = response.data;\n      \n      localStorage.setItem('token', access_token);\n      api.defaults.headers.common['Authorization'] = `Bearer ${access_token}`;\n      \n      // Set user data (in a real app, you'd get this from the token or a separate API call)\n      setUser({\n        id: 1,\n        username,\n        email: `${username}@indianrailways.gov.in`,\n        full_name: username === 'admin' ? 'System Administrator' : username,\n        role: username === 'admin' ? 'admin' : 'inspector',\n        is_active: true\n      });\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem('token');\n    delete api.defaults.headers.common['Authorization'];\n    setUser(null);\n  };\n\n  const value = {\n    user,\n    login,\n    logout,\n    loading\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}